#!/usr/bin/env python
"""
Script to run PKP session
"""

from __future__ import division, absolute_import
from __future__ import print_function, unicode_literals
from builtins import dict

import logging
import argparse

import pkp.runner
# import coloredlogs
# coloredlogs.install(level='DEBUG')

yml_file_default = 'input.yml'


if __name__ == '__main__':
    logger = logging.getLogger('')

    parser = argparse.ArgumentParser(
        description="PKP Runner"
    )
    parser.add_argument('yml_file', action="store",
                        help="YAML input file")
    parser.add_argument('-n', action="store", dest="np", type=int,
                        default=1,
                        help="Number of processor")
    parser.add_argument('-o', action="store", dest="results_dir",
                        type=str,
                        default="Results", help="Results directory")
    parser.add_argument('-d', action="store_true", dest="debug",
                        help="Print debug messages")
    parser.add_argument('--run-only', action="store_true",
                        dest="run_only",
                        help=("Run only detailed models"
                              " without calibration"))

    argument = parser.parse_args()
    if argument.debug:
        log_level = logging.DEBUG
    else:
        log_level = logging.INFO

    run_only = argument.run_only

    # define the logger for the main runPKP
    logger = logging.getLogger('runPKP')
    logger.setLevel(log_level)

    # fmt="%(levelname)s:%(name)s:%(funcName)s:%(message)s")

    # define an handler for runPKP logger
    handler = logging.StreamHandler()
    handler.setFormatter(logging.Formatter(fmt="%(name)s:%(message)s"))
    logger.addHandler(handler)

    # set loglevel to INFO in evolution
    log_pkp = logging.getLogger('pkp')
    log_pkp.setLevel(log_level)
    handler_info = logging.StreamHandler()
    handler_info.setFormatter(logging.Formatter(
        fmt="%(name)s:%(funcName)s:%(message)s"))
    handler_info.setLevel(logging.DEBUG)
    handler_debug = logging.StreamHandler()
    handler_debug.setFormatter(logging.Formatter(
        fmt="%(levelname)s:%(name)s:%(funcName)s:%(message)s"))
    handler_debug.setLevel(logging.DEBUG)
    log_pkp.addHandler(handler_info)
    # log_pkp.addHandler(handler_debug)

    # force evolution to INFO
    logging.getLogger('pkp.evolution').setLevel(logging.INFO)

    # logging.setLevel(log_level)
    yml_file = argument.yml_file
    logger.info('Run PKP version %s', pkp.__version__)
    logger.info('Create runner and read settings')
    runner = pkp.runner.PKPRunner(yml_file)
    logger.info('Start run')
    results = runner.run(results_dir=argument.results_dir,
                         n_p=argument.np, run_only=run_only)

    # plot results
