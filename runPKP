#!/usr/bin/env python
"""
Script to run PKP session
"""

from __future__ import division, absolute_import
from __future__ import print_function, unicode_literals
from builtins import dict

import logging
import argparse
import shutil
import sys

import pkp.runner
# import coloredlogs
# coloredlogs.install(level='DEBUG')


def parse_args():
    """
    Define arguments of the script
    """
    parser = argparse.ArgumentParser(
        description="PKP Runner"
    )
    parser.add_argument('yml_file', action="store",
                        help="YAML input file")
    parser.add_argument('-n', action="store", dest="np", type=int,
                        default=1,
                        help="Number of processor")
    parser.add_argument('-o', action="store", dest="results_dir",
                        type=str,
                        default="Results", help="Results directory")
    parser.add_argument('-d', action="store_true", dest="debug",
                        help="Print debug messages")
    parser.add_argument('--run-only', action="store_true",
                        dest="run_only",
                        help=("Run only detailed models"
                              " without calibration"))
    return parser.parse_args()


def create_main_logger():
    """
    Create the main logger for runPKP
    """
    logger = logging.getLogger('runPKP')
    logger.setLevel(logging.WARNING)
    logger.addHandler(logging.StreamHandler(stream=sys.stdout))
    return logger


def create_pkp_logger(argument):
    """
    Define the logger for the pkp module
    """
    # define a logger for pkp module
    # define a stream handler for runPKP logger
    formatter = logging.Formatter(
        "%(levelname)s:%(name)s:%(funcName)s:%(message)s")
    handler = logging.StreamHandler(stream=sys.stdout)
    handler.setFormatter(logging.Formatter(
        '%(name)s:%(funcName)s:%(message)s'))
    handler.setLevel(logging.INFO)

    log_pkp = logging.getLogger('pkp')
    log_pkp.setLevel(logging.DEBUG)
    log_pkp.addHandler(handler)

    if argument.debug:
        file_handler = logging.FileHandler('runpkp.log', 'w')
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)
        log_pkp.addHandler(file_handler)

    # force evolution to INFO
    logging.getLogger('pkp.evolution').setLevel(logging.INFO)

    return log_pkp


if __name__ == '__main__':
    argument = parse_args()
    run_only = argument.run_only

    # set loggers
    logger = create_main_logger()
    log_pkp = create_pkp_logger(argument)

    # Execute Runner
    logger.warning('Run PKP version %s', pkp.__version__)
    logger.info('Create runner and read settings')
    runner = pkp.runner.PKPRunner(argument.yml_file)
    logger.info('Start run')
    results = runner.run(results_dir=argument.results_dir,
                         n_p=argument.np, run_only=run_only)
    logger.warning('End running')
    shutil.copy(argument.yml_file, argument.results_dir)
