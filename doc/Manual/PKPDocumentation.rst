.. _usermanual-label:

User Manual
===========

| PKP, the Pyrolysis Kinetic Preprocessor, is a tool to generate the
  parameter for modeling the pyrolysis process in CFD-applications. It
  allows a central data input for all three connected pyrolysis programs
  ``CPD``, ``CPD`` and ``PC Coal Lab``. The results of the selected
  pyrolysis programs will be used to generate the kinetic parameter for
  several kinetic models: constant Rate, Arrhenius rate, Kobayashi model
  and the Distributed Activation Energy Model (DAEM), see
  chapter [SS\_KinEq]. A second procedure generates parameter for the
  species and energy balance,
  chapters [SSS\_ConsEqCPD] and [SSS\_ConsEqFGDVC].
| PKP is written object orientated in Python 2.7.3.

First Steps
-----------

Before running the ``CPD`` \ pyrolysis model with the program the first
time, the ``CPD`` -Code [1]_ has to be compiled and the executable has
to copied to the main directory (containing also the Python code). There
the ``CPD`` \ executable should be renamed *CPD.out*. [2]_ The directory
must contain the following files:

-  Coal.inp (User input for the information about the coal)

-  CPD.inp (User input for the settings of ``CPD`` )

-  CPD.out (the ``CPD`` \ executable)

-  FGDVC.inp (User input for the settings of ``FG-DVC`` )

-  IN.dat (input file for ``CPD``)

-  OperCond.inp (User input for the operating conditions)

-  Pyrolysis.py (the main code, accessing to the classes defined in the
   other \*.py)

The subdirectory *src* includes the following Python files,
*Pyrolysis.py* accesses to:

-  Compos\_and\_Energy.py

-  CPD\_Result.py

-  CPD\_SetAndLaunch.py

-  FGDVC\_Result.py

-  FGDVC\_SetAndLaunch.py

-  FitInfo.py

-  Fitter.py

-  InformationFiles.py

-  Models.py

Before running FG-DVC, the directories have to be defined, see the
paragraph \ **FGDVC.inp** in chapter [SS\_Generate\_Results]. There the
two information for  **main directory FG-DVC:** and **print increment,
writeValue:** must be defined. For CPD **print increment, writeValue:**
must be defined. All these information are kept, also when using the GUI
as input. So they just have to be defined once as long as they don’t
need to be changed.

Generate Results
----------------

The output of the pyrolysis programs has to be individually modified for
a further work with. Also the user of PKP should be aware of the
following points:

FG-DVC
^^^^^^

PKP was tested using ``FG-DVC`` \ version 8.2.3. Also the output of
``FG-DVC`` \ 8.2.2., which seems to be concerning the shape identical to
8.2.3, was tested.

-  ``FG-DVC`` \ merge the olefins and paraffins into the rate of tar.
   But the yields of tar, outputted by ``FG-DVC`` \ just consider the
   species of tar except the olefins and paraffins. As the olefins and
   paraffins are in general not considered as single species in CFD
   combustion and gasification applications, the yield of tar generated
   by ``FG-DVC`` \ further also includes the Olefins and Paraffins. As
   the output of the olefins and paraffins themselves are correct, the
   kinetic parameter of this two species are additionally still fitted.

-  The output of ``FG-DVC`` \ does not directly report the yields and
   rates of hydrogen. To generate this information, the yields of
   hydrogen are calculated by subtract the light gases (:math:`CH_4`,
   CO, :math:`CO_2`, :math:`H_2O`, ...) from the total yields (last
   column in the ’gasyield.txt’). The rate is gained by derive a
   smoothed curve [3]_.

-  The amount of moisture and ash is both equal zero. This is
   recommended in the manual. Trying to set a fraction of moisture and
   ash leads to unrealistic results in the ``FG-DVC`` \ output (negative
   yields and rates).

-  The constant numerical time step for ``FG-DVC`` \ defined by the user
   shouldn’t be lower than :math:`10^{-3}`. The temperature history
   defined by the user is imported by ``FG-DVC`` \ as a text file [4]_.
   According to experience can ``FG-DVC`` \ not read imported text files
   defining the temperature history with a precision better than the
   :math:`10^{-3}`.

CPD
^^^

-  The outputted result files of ``CPD`` \ does contain various
   information. For the further work the fraction of yields (beginning
   with ’f’, e.g. ’ftar’ in the first and fourth ``CPD`` \ output file
   are further observed.)

-  As the ``CPD`` \ output does not contain the rates, these rates over
   time are generated by deriving them using the CDS.

-  | If an oscillation in the output of the rates occur is the time step
     too low. There are not enough counting numbers in the output file.
     So the reported rates vary from zero (the in the CDS subtracted two
     yields have the same value) and a very high value (the last
     counting number changes, but the time step is very low).
   | The user has here the following possibilities to solve this
     problem:

   -  Use a lower time step.

   -  Set ’\ *print increment, writeValue:*\ ’ in *CPD.inp* to a high
      value. The calculation is still carried out with the ow time step.
      But not every calculated time is written into the result file.

   -  Modify the precision of the ``CPD`` \ output by modify the ``CPD``
      \ code. If just the number of counting numbers is modified PKP
      will still be able to read this modified output.

| The user of PKP can apply a number of runs up to five of the pyrolysis
  programs. Every runs must have its individual temperature history. The
  different devolatilization results caused by the different operating
  conditions shall ensure a better applicability of the kinetics in CFD
  simulations, where the operating conditions can vary over a range.
  Taking responsibility to the computational costs, two or three runs is
  a good option to generate the kinetic parameter.
| The directly outputted results of the pyrolysis programs are copied
  into the main PKP directory. The number of the run is contained in the
  filename.
| The following subsections give mode detailed information and an
  overview on the specific user input and the generated PKP results.

Using the Graphical User Interface
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. figure:: Figures/GUI
   :alt: A screenshot of the Input GUI.

   A screenshot of the Input GUI.

When starting the graphical user interface, file *PKPgui.py*, the
central input windows opens, see figure [F\_GUI]. As also visible in
this figure, the general input structure is splitted into three parts:
*Pyrolysis Programs and Fitting*, *Coal Properties* and \ *Operating
Conditions*. The following selections can be done in the first of these:

-  **CPD**, **FG-DVC**, **PC Coal Lab**: These column boxes allow a
   selection, which of these detailed models shall be used and which
   kinetic parameter shall be fitted. The first two possible selections
   are here *None*, for not running this model, *Run* to just run it and
   make the species analysis. A fitting of kinetic parameter will not be
   carried out. Additional selections for fitting the results are
   *constant Rate* (eq. [E\_Reaction\_g]),
   *Arrhenius* (eq. [E\_Arrhenius\_g]),
   *Arrhenius no B* (eq. [E\_Arrhenius\_g\_noB]),
   *Kobayashi* (eq. [E\_Kobayashi]) and *DAEM* (eq. [E\_DAEM]). Here the
   fitting and the species analysis will be done.

-  **selected Fit Species (Arrhenius)** is only important if one of the
   selected models to fit is *Arrhenius* or *Arrhenius no B*. This
   column box allows which species shall be fitted. Possible options to
   choose are here:

   -  *Total*: only the overall yield is fitted

   -  *Main Species*: the yield curves of the overall yields, tar and
      gas (the sum of the light gases) are fitted

   -  *all Species*: the kinetic parameter for all species outputted by
      the detailed model are fitted

-  **Weight Parameter** Enter the parameter for the fitting procedure.
   The text line Weight Parameter Yields sets the factor
   :math:`\mathrm{a_0}` in equation [E\_Weight\_Param1], Rates sets
   :math:`\mathrm{a_1}` in equation [E\_Weight\_Param2].

The second section of the GUI, the information about the coal can be
entered. All properties refer to the coal in the as received state.

-  **Ultimate Analysis in  %** Sets the ultimate analysis of the coal.
   Values should be in percent.

-  **Proximate Analysis in %** Sets the proximate analysis of the coal.
   Values should be in percent.

-  **Molecule Weight Tar**: define the molecule weight of the tar.
   Required for the species analysis.

-  **Higher Veating Value** Enter here the higher heating value of the
   coal in :math:`\mathrm{\frac{MJ}{kg}}`.

-  **FG-DVC Coal #** FG-DVC needs an information whether the coal
   property file should be interpolated using the van-Krevelen Diagram
   (option *0-Interpolate*) or if a library coal should be used (1-8).
   If the selected coal is out of the range of the library coals, the
   closest library coal has to be selected. The generation of the coal
   file is also done automatically by PKP. [5]_

-  **FG-DVC tar cracking** Defines the FG-DVC modeling of the tar
   cracking. Possible selections are:

   -  *0.0* No tar cracking is modeled. [6]_

   -  When entering a time in seconds, e.g. ’0.01’, defines the holding
      time of the tar in the coal molecule. The tar is cracked during
      this time frame.

   -  A negative number, e.g. ’-1’, sets the full tar cracking.

The last section in the GUI allows the input of the operating
conditions:

-  **Pressure in atm** Defines the pressure where the devolatilization
   occurs.

-  **numerical time step** Sets the time step. For FG-DVC the constant
   value, for CPD the maximum.

-  | **Temperature History** With the spin box on the left, the numbers
     of temperature histories to apply is defined. If this is set to
     ’3’, three runs are carried out using the first three temperature
     histories. These temperature histories can be imported via the five
     text fields on the right. There the temperature histories can be
     entered manually or also be imported using the ’open’ buttons in
     below. Additionally they can be plotted (button ’plot’). Using this
     option also saves the temperature history in a
     file \ *TempHist1.dat*.Where the number stands for the current
     field. These saved temperature histories can be re-imported using
     the ’open’ button.
   | All the temperature histories have to be entered in two columns,
     just separated by spaces. The time is in seconds, the temperature
     in Kelvin.

The head menu contains under File following options:

+--------------------------+----------+
| Write into Table         | Ctrl+S   |
+--------------------------+----------+
| Write and Run            | Ctrl+R   |
+--------------------------+----------+
| Load saved state         | Ctrl+O   |
+--------------------------+----------+
| Show generated Results   | Ctrl+T   |
+--------------------------+----------+
| Exit                     | Ctrl+Q   |
+--------------------------+----------+

| Where the Write saved all information into the *.inp* files and the
  *TempHist#.dat* in the main directory. ’Load saved state’ transfer
  this information into the current GUI.
| The ’Write and Run’ is identical with the button ’Launch’ in the lower
  right of the GUI.
| The file menu ’Help’ offers to open this manual.
| Please do not forget to make the general settings in the input files,
  before using PKP the first time, see chapter [SS\_1stSteps].
| After running the result windows opens, figure [F\_GUIDone]. It lists
  all calculated species in the column bar. With ’Show results’ the
  yields over time for the detailed model output and the fitted equation
  are plotted. ’Open Species analysis’ opens the textiles with the
  species analysis results for each run. Open kinetic parameter opens
  the text file with the results of the fitting, one file for each
  detailed model. If this window was closed, it can be reopened by the
  option ’Show generated Results’ (Ctrl+T) in the Main window.
| All results are located in the Result directory. When starting a new
  run, its content is deleted.

.. figure:: Figures/GUI_Done
   :alt: A screenshot of the Result GUI.

   A screenshot of the Result GUI.

Using the input files
~~~~~~~~~~~~~~~~~~~~~

| The manual user input is managed by the four *\*.inp* files,
  *Coal.inp, CPD.inp* *FGDVC.inp* and *OperCond.inp*.
| The information you want to insert into these files have to be in the
  line below the line asking for the information. For example:
| *Fixed Carbon:
  43.7*
| This sets the amount of Fixed Carbon equal 43.7. The position (i.e.
  the line) of such two lines in the input file does not matter, the
  only important point is the specific string (in this example \ *Fixed
  Carbon:*) and that the value you want to set is in the following line
  after the string. [7]_
| Firstly you will get a short overview into these files and the values
  to enter into them:

Coal.inp
^^^^^^^^

contains the main information about the coal. PKP forwards the
information about the coal from this file to the programs ``CPD`` \ and
the ``FG-DVC`` \ coal generator (*/COALS/coalsd.exe* in the ``FG-DVC``
\ directory). The proximate analysis values are only required by
``CPD``.

-  **Fixed Carbon:** sets the amount of fixed carbon in the coal. The
   value has to be entered in percent for a non-daf coal.

-  **Volatile Matter:** sets the amount of volatile matter in the coal
   in percent, as received.

-  **UA Carbon:**, **UA Hydrogen:**, **UA Nitrogen:**, **UA Oxygen:**
   sets the ultimate analysis for the coal to model. The values have to
   be entered in percent.

-  **Higher Heating Value, as received, in J/kg:** sets the higher
   heating value for the coal. If this value is not known, set it equal
   zero. Then the Dulong formula (equation [E\_Dulong]) will be used to
   calculate the higher heating value.

-  **Tar Molecule weight, MTar:** Sets the molecule weight of the tar,
   as it is required for the species and energy calculation, see
   chapters [SSS\_ConsEqCPD] and [SSS\_ConsEqFGDVC].

-  **Weight-Parameter yields for fitting the kinetics:** sets the weight
   :math:`\mathrm{a_0}` of the equation [E\_Weight\_Param1] to weight
   the yields in the fitting procedure (equation [E\_LS]).

-  **Weight-Parameter rates for fitting the kinetics:** sets the weight
   :math:`\mathrm{a_1}` of the equation [E\_Weight\_Param2] to weight
   the rates in the fitting procedure (equation [E\_LS]).

CPD.inp
^^^^^^^

controls the ``CPD`` \ program and the further work with its output.

-  **useCPD?:** if set to *yes* or *true*, ``CPD`` \ will be launched.

-  **selected fitting Approximation:** if the *constantRate* is
   selected, the fitting will be carried out using
   equation [E\_constRate\_s] and [E\_constRate\_g]. When selecting
   *Arrhenius*, the kinetic parameter for the Arrhenius equation modeled
   pyrolysis kinetics (equation [E\_Arrhenius\_g]) will be calculated.
   To fit the Kobayashi parameter, set it to *Kobayashi*. If selecting
   *None*, no fitting of the kinetic parameter will be carried out, just
   the direct ``CPD`` \ results and species and energy balance will be
   generated.

-  **initial time step in s:** The initial time step, ``CPD`` \ starts
   to calculate with.

-  **print increment, writeValue:** Integer which sets the frequency of
   writing the result into the ``CPD``-output file. E.g. ’1’ means every
   value is written into the file, ’3’ only every third value.

FGDVC.inp
^^^^^^^^^

controls the ``FG-DVC`` \ program and the further work with its output.

-  **use FG-DVC?:** if set to *yes* or *true*, ``FG-DVC`` \ will be
   launched.

-  **selected fitting Approximation:** This selection is analogous to
   the in *CPD.inp*

-  **main directory FG-DVC:** sets the main path of ``FG-DVC``, where
   the *fgdvc.exe* is located. One example:
   ’C:\ ``\``\ Programs\ ``\``\ FGDVC\_8-2-3\ ``\``’

-  | **directory fgdvc-output:** Sets the main directory, where
     ``FG-DVC`` \ outputs the results. This is in general the directory,
     where the *fgdvcd.exe* is located. One example:
     ’C:\ ``\``\ Programs\ ``\``\ FGDVC\_8-2-3\ ``\``\ FGDVC\ ``\``’.
   | To use other already generated FG-DVC output files, it is a good
     option to set their path here. As long as they are still named
     *gasrate.txt* and *gasyield.txt*, the fitting will be carried out
     on the information contained in these files.

-  **Choose Coal:** If this is set equal *0*, the interpolation of the
   coal will be carried out using the information from *Coal.inp* and
   the FG-DVC program *coalsd.exe*, leading to specific ``FG-DVC``
   \ coal files for the applied coal. If the file cannot be generated,
   i.e. the used coal is outside the interpolation triangle [8]_, select
   a value from *1* to *8* to use one of the ``FG-DVC`` \ library coals.
   The order here is the same as in ``FG-DVC``:

   #. Beulah-Zap

   #. Wyodak-Anderson

   #. Illinois # 6

   #. Bind Canyon, UT

   #. Lewis-Stockton, WV

   #. Pittsburgh # 8

   #. Upper Freeport, PA

   #. Pocahontas # 3, VA

-  **Model tar cracking?** To model no tar cracking (as recommended in
   the ``FG-DVC`` \ manual) set the tar residence time equal *0*. A
   partial tar cracking can be modeled by set the tar residence time is
   seconds. If a full tar cracking shall be used, set the residence time
   to a negative input value, e.g write *-1*.

OperCond.inp
^^^^^^^^^^^^

sets the operating condition for the pyrolysis programs.

-  **pressure in atm:** Sets the constant pressure in atmospheres.

-  **FG-DVC: constant (numerical) time step; CPD: maximum time step**:
   Enter here the numerical time step, the constant for ``FG-DVC`` \ and
   the maximum value for ``CPD``.

-  **Number of Temperature Histories to include:** Defines, how many
   runs of the pyrolysis models should be carried out. The different
   temperature history will be defined with the help of the next point:

-  | **Start Time History 1:** This line have to follow two columns,
     defining the temperature history for the first run of the pyrolysis
     models. The first column lists the time in seconds, the second one
     the temperature in K. The last time point is automatically selected
     as the final pyrolysis time. The end of the time-temperature array
     has to be labeled by the term *End Time History 1*. Here one
     example:
   | *Start Time History 1
     0, 293
     0.05, 1000
     0.1, 1700
     0.6, 1700
     End Time History 1
     * Analogue to this term the numbers 2 to 5 label the temperature
     history for the second to the fifth run.

The Result Files
~~~~~~~~~~~~~~~~

The generated results are documented in the following files. The name of
the text-files contains in front the used pyrolysis program (e.g.
*CPD-BalanceResults.txt*).

BalanceResults.txt
^^^^^^^^^^^^^^^^^^

This file contains the output of the species and the energy
conservation, chapters [SSS\_ConsEqCPD]  and [SSS\_ConsEqFGDVC]. The
first part lists the input of the UA, PA and HHV. Afterwards, the final
yields of all species are enumerated, as the result of using the
equation [E\_add\_up] to [E\_MethanNew]. The tar
composition (equation [E\_TarComp]), assuming a
:math:`\mathrm{C_nH_mO_p}` molecule with an average molecule mass,
inputted by the user, is given by the factors n, m, p. The last two
parts show the results applying the equations [E\_Dulong] to [E\_QPyro].

Results\_const\_rate.txt
^^^^^^^^^^^^^^^^^^^^^^^^

This file contains the kinetic parameters for the constant rate
(equation [E\_constRate\_s] or [E\_constRate\_g]) fitting. The two
parameters are k in :math:`\mathrm{\frac{1}{s}}` and
:math:`\mathrm{t_{start}}` in s.

Result\_ArrheniusRate.txt
^^^^^^^^^^^^^^^^^^^^^^^^^

*Result\_ArrheniusRate.txt* lists all kinetic parameter (A in
:math:`\mathrm{\frac{1}{s}}` and E in K) for the Arrhenius
equation [E\_Arrhenius\_s] or [E\_Arrhenius\_g].

Results\_KobayashiRate.txt
^^^^^^^^^^^^^^^^^^^^^^^^^^

This file list for all species the Kobayashi kinetic parameter
:math:`\mathrm{A_1 \; and \; A_2 \; in \; \frac{1}{s}}`,
:math:`\mathrm{E_1 \; and \; E_2 \; in \; K}`,
:math:`\mathrm{\alpha_1 \; and \; \alpha_2}`.

Fit\_result\_[Species]\_[R/Y].pdf
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

These files contains the plots of the pyrolysis program output curve and
the estimated curve using the applied model. These plots show the rate
(then \*\_R.pdf) or yields (\*\_Y.pdf). This plot exists for all species
calculated by the pyrolysis program (named in \*\_Species\_).

Fit\_result\_[Species].out
^^^^^^^^^^^^^^^^^^^^^^^^^^

For every species is in the referring file the *Time*, *Temperature*,
*Yields* and the *Rates* written in columns. This is not the original
output from the pyrolysis program, it is the result applying the
selected equation with the fitted parameter.

Equations
=========

Pyrolysis Kinetic Equations
---------------------------

In PKP are four possible kinetic models to select:

-  The Constant Rate Model, section [SSS\_cR]

-  The Arrhenius Model, [SSS\_Arrh]

-  The Kobayashi Model, [SSS\_Kob]

-  The Distributed Activation Energy Model, [SSS\_DAEM]

| The Kobayashi model has the advantage, that the yields are dependent
  on the individual temperature history. A change, may in in the final
  temperature leads to a higher yield.
| The constant rate and the Arrhenius model has fixed final yields. The
  general devolatilization reactions for these two models are described
  with equations [E\_Reaction\_s] and [E\_Reaction\_g],
  where [E\_Reaction\_s] describes the mass loss of the
  solid (index \ *s*) coal, equation [E\_Reaction\_g] the formation of
  the yields (gaseous:\ *g*, individual:\ *i*).

  .. math::

     \begin{aligned}
     \label{E_Reaction_s}
      \frac{dm_{s}}{dt}&=-k_s \: \left( m_{s} - m_{s,final} \right)\\
     \label{E_Reaction_g}
      \frac{dm_{g,i}}{dt}&=k_{g,i} \: \left(m_{g,i,final} - m_{g,i}\right)  \end{aligned}

  So when using more than one run, also the final yield is a parameter
  to fit. It will be located in between the final yields of the runs of
  the pyrolysis models.

In the following subsections, the plots showing the rates and yields
were generated with ``CPD`` \ and ``FG-DVC`` \ showing the yields and
rates for different species. All are based on the same temperature
profiles as shown in figure [F\_Tt].

.. figure:: Figures/tempHist
   :alt: The temperature history.

   The temperature history.

The table [T\_Fit] gives an overview of the models with their parameters
to fit and species to apply this model on. This is described more
detailed in the next subsections.

[T\_Fit]

+-----------------+-----------------------+----------------------+
| **Model**       | **fitted parmeter**   | **fitted species**   |
+=================+=======================+======================+
| constant Rate   |                       |                      |
+-----------------+-----------------------+----------------------+
| Arrhenius       |                       |                      |
+-----------------+-----------------------+----------------------+
| Kobyashi        |                       |                      |
+-----------------+-----------------------+----------------------+
| DAEM            |                       |                      |
+-----------------+-----------------------+----------------------+

Table: The fitted models and their parameter.

The Constant Rate Model
~~~~~~~~~~~~~~~~~~~~~~~

Assuming a **constant rate** (:math:`\mathrm{k = const. }` and a
starting time :math:`\mathrm{t_{start}}`), the
equations [E\_Reaction\_s] and [E\_Reaction\_g] can be solved
analytically:

.. math::

   \begin{aligned}
   \label{E_constRate_s}
   m_s(t)&=m_{s,final} + \left( m_{s}(t=t_{start,s}) - m_{s,final} \right) \: e^{-k_s(t-t_{start,s})}\\
   \label{E_constRate_g}
   m_{g,i}(t)&=m_{g,i,final}\cdot \left( 1 - \: e^{-k_i(t-t_{start,i})} \right)\\
   \label{E_Offset_Time}
   if \;\;\; t\leq t_i\::\;\;\; m(t)&=m(0)\end{aligned}

| This leads to advantage concerning the computational costs. On the
  other hand is this model completely independent from the temperature
  history. This is visualized in figure [F\_Fit\_cR\_Y] where all fitted
  curves overlap each other.
| The parameters to fit are for every species:

-  the starting time (\ :math:`t_{start,i}`), where the devolatilization
   begins

-  the constant rate factor :math:`k_i`

-  the final yield (when more than one run)

This model is applied to all species.

.. figure:: Figures/FG-DVC-Fit_result_cR_H2O_Y
   :alt: One fitting result (Yields) for the constant Rate Model. The
   observed species is water.

   One fitting result (Yields) for the constant Rate Model. The observed
   species is water.

The Arrhenius Model
~~~~~~~~~~~~~~~~~~~

| The kinetic rate k can be also expressed with the **Arrhenius**
  equation:

  .. math::

     \begin{aligned}
     \label{E_Arrhenius_s}
      \frac{dm_s}{dt}&=A_s \cdot T(t)^{b_s} \cdot e^{-\frac{E_s}{T(t)}}\left( m_{s} - m_{s,final} \right)\\
     \label{E_Arrhenius_g}
      \frac{dm_{g,i}}{dt}&=A_i \cdot T(t)^{b_{g,i}} \cdot e^{-\frac{E_{g,i}}{T(t)}}\left(m_{g,i,final} - m_{g,i}\right)\end{aligned}

  This notation of the Arrhenius equation includes no gas constant R in
  the exponential term. So the activation energy (or here more precise
  activation temperature) has the unit Kelvin. This is so far an
  advantage as the fitted :math:`E_i` is independent of the used unit
  system (SI or cgs).
| A second notation of the Arrhenius equation contains not the
  correction term :math:`T(t)^{b_{g,i}}`:

  .. math::

     \begin{aligned}
     \label{E_Arrhenius_s_noB}
      \frac{dm_s}{dt}&=A_s \cdot e^{-\frac{E_s}{T(t)}}\left( m_{s} - m_{s,final} \right)\\
     \label{E_Arrhenius_g_noB}
      \frac{dm_{g,i}}{dt}&=A_i \cdot e^{-\frac{E_{g,i}}{T(t)}}\left(m_{g,i,final} - m_{g,i}\right)\end{aligned}

Unlike the constant rate model is the Arrhenius modeled rate influenced
by the temperature. But the Arrhenius model can be used to express the
evolve for all species and the final yields are also fixed. So the
parameter to fit are here:

-  the preexponentiation factor \ :math:`A_i`

-  the correction factor :math:`b_i`

-  the activation energy :math:`E_i`

-  the final yield (when more than one run)

| This model is applied to all species.
| The Arrhenius model leads to a good agreement in the yield and rate
  curves for a limited range of temperatures,
  figures [F\_Fit\_Arrh\_Y], [F\_Fit\_Arrh\_R]. The disadvantage is the
  temperature independent yield fraction, all integrals for the rate
  curves in figure [F\_Fit\_Arrh\_R] are the same. This leads to an
  imprecision as the yields show a dependency on the final temperature
  and heating rate.

.. figure:: Figures/CPD-Fit_result_Arrh_Tar_Y
   :alt: One fitting result (Yields) for the Arrhenius Model. The
   observed species is tar.

   One fitting result (Yields) for the Arrhenius Model. The observed
   species is tar.

.. figure:: Figures/CPD-Fit_result_Arrh_Tar_R
   :alt: One fitting result (Rates) for the Arrhenius Model. The
   observed species is tar.

   One fitting result (Rates) for the Arrhenius Model. The observed
   species is tar.

The Kobayashi Model
~~~~~~~~~~~~~~~~~~~

Also the **Kobayashi** equation, also Two Competing Reaction Model, can
be fitted, see equation [E\_Kobayashi]. The optimization is carried out
using the Arrhenius notation of equation [E\_Kob\_k] for
:math:`\mathrm{k_1}` and :math:`\mathrm{k_2}`.

.. math::

   \label{E_Kobayashi}
    \frac{m_v(t)}{m_{p,0} - m_a}= \int_{0}^{t} ( \alpha_1 k_1 + \alpha_2 k_2 ) exp \left( -  \int_{0}^{t} ( k_1 + k_2 ) \; dt \right) \; dt

.. math::

   \label{E_Kob_k}
    k_j=A_j \:e^{-\frac{E_{j}}{T(t)}} \;\;\;\;\;\; with \: j=1,2

| The Kobayashi model can be applied only on the the overall, the total
  yields. The yield of individual species could be generated by
  multiplying the overall yield with the yield
  fraction \ :math:`\frac{y_i}{y_{all}}`. But as the composition of the
  yields varies with the temperature history this factor also shows this
  dependency, which may leads to an imprecision when modeling the
  individual yields.
| The final yields of this model are dependent on the temperature, see
  figures [F\_Fit\_Kob\_Y] and [F\_Fit\_Kob\_R]. The range of the yields
  are defined by the two weight
  factors \ :math:`\alpha_1` and :math:`\alpha_2`. The :math:`k_1`
  models the reactions at lower temperatures (low :math:`A_1` and
  :math:`E_1`), :math:`k_2` at higher temperatures (high :math:`A_2` and
  :math:`E_2`). If the final temperature has very low values, the yields
  will converge to \ :math:`\alpha_1`. If the temperatures will raise to
  infinity, the yields will be equal \ :math:`\alpha_2`. So
  :math:`\alpha_2` is ever set equal one: :math:`\alpha_2=1`.
  :math:`\alpha_1` is equal the amount of volatile matter in the daf
  coal. As the measurements, the proximate analysis of coal is based on,
  were carried out at very low heating rates compared with the ones
  occurring at gasification and combustion processes, the approximation
  :math:`\alpha_1=VM` is an applicable and good assumption.
| For the fitting procedure, the inner integral
  :math:`\int_{0}^{t} ( k_1 + k_2 ) \; dt` is approximated by the
  Trapezoidal rule.
| As it can be seen in figures [F\_Fit\_Kob\_Y] and [F\_Fit\_Kob\_R],
  the higher temperatures (figure [F\_Tt]) lead to higher yields. But
  the influence of the temperature cannot be modeled that the dependency
  on temperature is completely the same as in the output of the more
  complex pyrolysis programs. So leads the higher temperature in case 1
  compared to case 3 to a slightly higher yield in the output of ``CPD``
  \ while the influence on the Kobayashi modeled result is greater.

.. figure:: Figures/CPD-Fit_result_Kob_Total_Y
   :alt: One fitting result (Yields) for the Kobayashi Model. The
   Kobayashi model just optimizes the overall yields.

   One fitting result (Yields) for the Kobayashi Model. The Kobayashi
   model just optimizes the overall yields.

.. figure:: Figures/CPD-Fit_result_Kob_Total_R
   :alt: One fitting result (Rates) for the Kobayashi Model.

   One fitting result (Rates) for the Kobayashi Model.

The Distributed Activation Energy Model
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

| The Distributed Activation Energy Model (DAEM) considers parallel
  first order kinetics over a specific range, described by a
  distribution function (F(E)). The equation used in PKP is:

  .. math::

     \label{E_DAEM}
      m = m_{final} \left( 1 - \int_{0}^{\infty} exp\left[ -A_0 \cdot \int^{t_{final}}_{t_0} exp\left( -\frac{E}{T} \right) dt  \right] F(E) \right)

  As a distribution function, a Gaussian Distribution is used:

  .. math::

     \label{E_GaussDistr}
      F(E) = \frac{1}{\sigma \cdot \sqrt{2\pi}} \cdot exp \left( -\frac{(E-E_0)^2}{2\sigma^2} \right)

   So there are four parameters to optimize:

#. the preexponentiation factor :math:`\mathrm{A_0}`, which is here
   equal for all reactions.

#. :math:`\mathrm{E_0}`, defining the center of the Gaussian
   Distribution

#. and :math:`\mathrm{\sigma}`, which spcifies the flattening of the
   Distribution curve and its range

#. for multiple runs, the :math:`\mathrm{m_{final}}` also has to be
   optimized

| For solving the outer integral over dE, the Simpson tule is used. But
  for the nemuerical solution of the integral, the range has to be
  modified. As reported in the paper by
  Cai :raw-latex:`\cite{Cai_DAEM1}`, the integration boundaries can be
  se to :math:`\mathrm{E_0 + 3 \cdot \sigma}` as the upper and
  :math:`\mathrm{E_0 - 3 \cdot \sigma}` as the lower limit. This range
  covers up to 99.73 % of the applied Gaussian Distribution. So for the
  further fitting of the devolatilization reaction, the prerequisite
  :math:`\mathrm{E_0 > 3 \cdot \sigma}` should be in force to achieve
  realistic results.
| The inner integral
  :math:`\mathrm{\int^{t_{final}}_{t_0} exp\left( -\frac{E}{T} \right) dt}`
  was already simplyfied by setting :math:`\mathrm{A_0}` as a constant.
  In many
  papers :raw-latex:`\cite{Cai_DAEM1,Cai_DAEM2,Cai_DAEM3,Slovak_DAEM}` a
  linear heating rate over the whole time range is assumed, so
  :math:`\mathrm{\frac{dT}{dt}=\beta}`. The transformation of the
  integral allows to integrate over the temperature. For such
  temperature integrals different analytical approaches
  exist :raw-latex:`\cite{Cai_DAEM1,Cai_DAEM2}`. This method was also
  tested. But as this is only a very specific case of the operating
  conditions and even not faster than solving the integrals [9]_, this
  approach is furthernot considered. The double integral is solved
  numerically. [10]_
| The outer integral is solved over a specific number of activation
  energies. For each activation energy the inner integral is solved and
  the value for all time steps saved, using a compisite Trapezoidal
  rule [11]_. All inner integrals are saved in a
  2D-Array(\ :math:`\mathrm{t_i,E_i}`). Each column contains all values
  of the inner integral for all time steps (the same activation energy),
  each line allinner integrals at the time :math:`\mathrm{t_i}`. After
  this array is calculated, the equation of the outer integral is used
  for all values of the current line of the matrix and afterwards this
  list is integrated over dE.

Fitting the Kinetic Equations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The fitting procedure is carried out with a ``scipy-optimizer``\  [12]_
 [13]_ and the ``scipy.odeint``\  [14]_ package to minimize the
residual \ :math:`E(k,m_{fit})` in the equation [E\_LS]. For the
structure of the whole fitting procedure see chapter [S\_Program]. In
equation [E\_LS] is :math:`\mathrm{m_{out}}` the output of the
devolatilization program ``CPD`` \ or ``FG-DVC`` . The optimization is
carried out over all points reported in the output file of the pyrolysis
program. The normalized weight factor
parameters \ :math:`\mathrm{a_0}` and :math:`\mathrm{a_1}` in the
equations [E\_Weight\_Param1] and [E\_Weight\_Param2] can both be
defined by the user, the standard setting is for both one.

.. math::

   \label{E_LS}
    E(k,m_{fit})=\omega_0 \int \left( m_{out}(t) - m_{fit}(k,t) \right)^2 dt \; + \; \omega_1 \int \left( \dot m_{out}(t) - \dot m_{fit}(k,t) \right)^2 dt

.. math::

   \begin{aligned}
    \label{E_Weight_Param1}
   \omega_0 &= \frac{a_0}{\left( max(m_{out})-min(m_{out}) \right)^2}\\
    \label{E_Weight_Param2}
   \omega_1 &= \frac{a_1}{max(\dot{m}_{out}^2)}\end{aligned}

Pyrolysis Species- and Energy Conservation for ``CPD`` \ output
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Species Conservation
^^^^^^^^^^^^^^^^^^^^

As the first step it has to be checked that the oxygen content in the
generated yields (oxygen containing species :math:`\mathrm{f_i}` with
:math:`\mu_i^{O}` oxygen) is less equal that the oxygen in the ultimate
analysis:

.. math::

   UAO^{cpd, \: species \: output} = M_{O} \sum_i \frac{\mu_i^{O} f_i}{M_i} \le UAO 
    \label{E_O_balance}

The factor \ :math:`\mathrm{\gamma}` ([E\_gamma]) tells if the outputted
yields contain less oxygen than reported in the Ultimate
Analysis (UA) (\ :math:`\gamma > 1`) or if they are
equal (\ :math:`\gamma = 1`). For the case that \ :math:`\gamma < 1`,
the oxygen containing yields have to be decreased by using
equation [E\_scale\_up], while the amount of the other species have to
be increased to conserve the conserve the amount of volatile
matter (equation [E\_add\_up]). In this case, the tar will contain no
oxygen. The yield of :math:`N_2` is equal to the UA of Nitrogen.

.. math::

   \begin{aligned}
    \gamma &= \frac{UAO}{UAO^{cpd, \: species \: output}}
    \label{E_gamma}\\
    f_i^{new} &= \gamma \cdot f_i 
    \label{E_scale_up}\\
    f_{oth}^{new} &= f_{oth} + \left(1-\gamma\right) \sum_i f_i
    \label{E_add_up}\end{aligned}

For the case :math:`f_{N_2}<f_{other}`, the remaining part is assigned
to :math:`CH_4`:

.. math::

   f_{CH_4}^{new} = f_{CH_4} + \left( f_{oth}^{new} - f_{N_2} \right)
   \label{E_MethanNew}

Now the composition of tar can be calculated. For each element C,H,O,
the following equation [E\_TarComp] can be used, assuming a tar
composition of \ :math:`C_nH_mO_p`. :math:`M_j` is the atom weight of
the element j, :math:`\mu_i^j` the number of atoms of \ :math:`j` in the
species \ :math:`i`.

.. math::

   \frac{UA_j}{M_j} = \mu_{tar}^j \frac{f_{tar}}{M_{tar}} + \sum_i \mu_i^{j} \frac{f_{i}}{M_{i}}
   \label{E_TarComp}

Energy Conservation
^^^^^^^^^^^^^^^^^^^

| The Dulong formula is used, if the higher heating value (HHV) of the
  coal is not known:

  .. math::

     \label{E_Dulong}
      HHV = 32.79 \cdot UAC + 150.4 \cdot (UAH - UAO/8) + 9.26 \cdot UAS + 4.97 \cdot UAO + 2.42 \cdot UAN

  where UAC, UAH, UAO, UAS and UAN are the value of the ultimate
  analysis for carbon, hydrogen, oxygen, sulfur and nitrogen. The result
  has the unit of \ :math:`\frac{MJ}{kg_{coal, as recieved}}`.
| Afterwards, the HHV (entered by the user or calculated with the Dulong
  formula) for the coal as received is related to the dry ash-free (daf)
  state (equation [E\_HHVdaf]). This new HHV is used to get the lower
  heating value for a daf state, equation [E\_LHV]. In this equation,
  :math:`r_{H_2O}` is the latent heat of water.

  .. math::

     \begin{aligned}
      HHV_{daf}&=\frac{HHV_{ar}}{PAVM+PAFC}
     \label{E_HHVdaf}\\
     LHV_{daf}&=HHV_{daf}-\frac{M_{H_2O}}{2 \cdot M_H} \cdot UAH \cdot r_{H_2O}\
     \label{E_LHV}\end{aligned}

| Regarding the combustion of the raw coal (equation [E\_Raw\_Comb]),
  the energy balance can be written as in equation [E\_Raw\_hf].

  .. math::

     \begin{aligned}
      &C_xH_y O_z N_w + (x + y/4 - z/2) O2 \rightarrow x CO2 + y/2 H2O + w/2 N2
     \label{E_Raw_Comb}\\
     &Q_{react}=LHV_{raw}\cdot M_{daf} = h_{f,raw} + (x + y/4 - z/2) h_{f,O_2} -x h_{f,CO_2} -y/2
     	h_{f,H_2O} - w/2 h_{f,N_2}
     \label{E_Raw_hf}\end{aligned}

  Using equation [E\_Raw\_hf], the heat of formation of the raw
  molecule (\ :math:`h_{f,raw}`) can be calculated.
| The heat of formation for tar is based on the equation [E\_DevolTar],
  implying, that no heat is produced or absorbed during the
  devolatilization process.

  .. math::

     \label{E_DevolTar}
      C_x H_y O_z N_w \rightarrow \nu_{char}C_{(s)} + \nu_{tar} C_n H_m O_p + \sum_i \nu_i M_i

| The stoichiometric coefficient of each species can be calculated from
  the volatile yield expressed as mass fraction:

  .. math::

     \label{E_myTar}
      \nu_i = \frac{f_i M_{raw}}{M_i}

  Making the energy balance for equation [E\_DevolTar] with
  :math:`Q_{react}=0`, the heat of formation for tar is:

  .. math::

     \label{E_Tar_hf}
      \nu_{tar} h_{f,tar} = h_{f,raw} - \nu_{char} h_{f,char} - \sum_i \nu_i h_{f,i}
| Another method is to assume a heat of formation for tar equal zero
  (e.g. if there is only a very low yield of tar), and calculate the
  heat of pyrolysis:

  .. math:: - Q_{pyro} \cdot M_{raw} = h_{f,raw} - \nu_{char} h_{f,char} - \sum_i \nu_i h_{f,i}

  Where :math:`Q_{pyro}` is the heat of pyrolysis per unit of mass of
  daf. It is positive if heat is required for breaking coal structure
  bounds. Generally, it is expressed in terms of volatile matter:

  .. math::

     \label{E_QPyro}
      Q_{pyro}^{vm} = \frac{Q_{pyro}}{1-f_{char}}

Pyrolysis Species and Energy Conservation for ``FG-DVC`` \ output
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Species Conservation
^^^^^^^^^^^^^^^^^^^^

| As in most of the CFD applications the combustion of some ``FG-DVC``
  \ output species like HCN, COS or Olefins are not implemented. Only
  the species Char, Tar, CO, :math:`CO_2`, :math:`H_2O`, :math:`CH_4`
  and :math:`H_2` are further considered. The nitrogen is merged into
  the tar. So the amount of tar is calculated by the using
  equation [E\_newTar], where the sum contains the species Char, CO,
  :math:`CO_2`, :math:`H_2O`, :math:`CH_4` and :math:`H_2`.

  .. math::

     \label{E_newTar}
      f_{Tar}=1-\sum_i f_i

  Applying the equation [E\_TarComp] for all the elements j (Carbon,
  Hydrogen, Nitrogen, Oxygen), the composition of tar (its
  stoichiometric coefficients) is calculated.

Energy Conservation
^^^^^^^^^^^^^^^^^^^

Applying the energy balance on the combustion reaction of the
devolatilization yields (for the case of a non-heat producing/consuming
pyrolysis process), the following reaction equation is satisfied:

.. math::

   \label{E_TarEnergy}
    LHV_{daf}=H_{f,Tar} \cdot f_{Tar} + \sum_i H_{f,i} \cdot f_{i}

The LHV is calculated based on the HHV using the same equations as in
chapter [SSS\_ConsEqCPD]. The :math:`H_{f,i}` are calculated with the
following equations [E\_hf1] to [E\_hf4], making an energy balance for
every of the pyrolysis yields. So the heat of formation for tar can be
calculated from equation [E\_TarEnergy], as all other parameters are
known.

.. math::

   \begin{aligned}
   \label{E_hf1}
    H_{f,Char}&=\left( (h_{f,Char}+h_{f,O_2}-h_{f,CO_2}) \cdot f_{Char} \right) \cdot M_C^{-1} \\
   \label{E_hf2}
    H_{f,H_2}&=\left( (h_{f,H_2}+ \frac{1}{2} \cdot h_{f,O_2} - h_{f,H_2O}) \cdot f_{H_2} \right) \cdot M_{H_2O}^{-1} \\
   \label{E_hf3}
    H_{f,CH_4}&=\left( (h_{f,CH_4}+ 2 \cdot h_{f,O_2}-h_{f,CO_2}-2 \cdot h_{f,H_2O}) \cdot f_{CH_4} \right) \cdot M_{CH_4}^{-1} \\
   \label{E_hf4}
    H_{f,CO}&=\left( (h_{f,CO}+ \frac{1}{2} \cdot h_{f,O_2}-h_{f,CO_2}) \cdot f_{CO} \right) \cdot M_{CO}^{-1}\end{aligned}

| The :math:`H_{f,Tar}` with the unit \ :math:`\frac{J}{kg}` is
  transformed back into \ :math:`\frac{J}{kmol}` by multiplying with the
  molecular mass of tar.
| To calculate the heat of formation for tar, the tar combustion can be
  regarded, as the tar composition is known:

  .. math:: C_nH_mO_pN_k + \nu_{O_2} O_2 \rightarrow  \nu_{CO_2} CO_2 + \nu_{H_2O} H_2O + \nu_{N_2} N_2

This leads to the balance, where the :math:`h_{f,Tar}` can be
calculated:

.. math:: H_{f,Tar} = h_{f,Tar} + \nu_{O_2} h_{f,O_2} - \nu_{CO_2} h_{f,CO_2} - \nu_{H_2O} h_{f,H_2O} -\nu_{N_2} h_{f,N_2}

Programs Structure
==================

| The files, the directory must contain, are listed in
  chapter [SS\_1stSteps]. The Python script *Pyrolysis.py* accesses to
  all the defined classes and controls the whole PKP program. So PKP can
  be launched the simplest way by starting *Pyrolysis.py*.
| The figure [F\_Structure] gives a overview of the program structure.
| The whole program structure is visualized in figure [F\_Structure],
  the fitting structure in figure [F\_OptimizationProc]. For a detailed
  documentation for each class and its method, see the document *PKP
  Code Documentation*.
| All required Python packages are also listened in this document. [15]_

.. figure:: Figures/Programstructure
   :alt: Overview of the program. The Optimization procedure is shown
   detailed in figure [F\_OptimizationProc].

   Overview of the program. The Optimization procedure is shown detailed
   in figure [F\_OptimizationProc].

.. figure:: Figures/FittingProcedure
   :alt: The optimization structure. The three classes
   *LeastSquarsEstimator*, *Fit\_one\_run* and *Model* are marked with
   different colors like in Figure [F\_Structure]. The Deviation is
   calculated with equation [E\_LS].

   The optimization structure. The three classes *LeastSquarsEstimator*,
   *Fit\_one\_run* and *Model* are marked with different colors like in
   Figure [F\_Structure]. The Deviation is calculated with
   equation [E\_LS].

| In figure [F\_Structure] the external programs are colored in red, the
  PKP classes are in green, marked below with the class name or the
  relevant file name. Inputted, transfered or outputted data is in
  black.
| So as first the specific user information about the operating
  conditions and the coal properties are imported using the reading
  classes contained in *Information Files.py*.
| Parts of this information are further used to write the input file for
  the ``FG-DVC`` \ coal generator [16]_, which is launched afterwards to
  generate the ``FG-DVC`` \ coal input files.
| Afterwards the pyrolysis programs are launched automatically by PKP.
  The file *IN.dat* is an input file for ``CPD`` \ telling how the
  output files should be named. So the content in *IN.dat* shouldn’t be
  changed. The central input file for ``FG-DVC`` \ is the *instruct.ini*
  which contains all information about the location of the coal file,
  the operating conditions and the numerical parameters. This file was
  generated by PKP before launching. The second input file for
  ``FG-DVC`` \ contains the temperature history. This file (named
  *tTHistory.txt*, located in the ``FG-DVC`` \ main directory) was also
  written by PKP before each run.
| The output files of the pyrolysis programs are read by their specific
  *\*\_Result* classes (e.g. *CPD\_Result*). These classes save the
  information from the output files, contain a dictionary with the
  information which column contains which species and physical variable.
  The *\*\_Result* classes also process the specific information (e.g.
  the modifications described in chapter [SS\_Generate\_Results], or the
  transformation from ms into s in the ``CPD`` \ output). Converting
  this pyrolysis program specific output shape into a general one has
  two main advantages. As this ’standard shaped’ information are passed
  to the following fitting data class *Fit\_one\_run*, is the fitting
  procedure working for the output of all pyrolysis programs the same
  way. The second advantage is, that for a modified output of a new
  version of a pyrolysis program just a new *\*\_Result* class needs to
  be added, modified for the new output shape. Using the dictionaries
  has the advantage that the code is better readable, more robust
  against modifications and more general purpose. So in the program the
  yield of tar can be requested with *self.Yield(’Tar’)* instead of
  using any number. A species must not have the same index in the output
  of the *\*\_Result* classes, which might also not work as the
  pyrolysis programs have different number of species in the yields
  (``FG-DVC`` \ has 15 species in the yields, ``CPD`` \ eight).
| The fitting procedure is carried out using three classes: a Least
  Squares Estimator, a kinetic model and a class for the pyrolysis
  program results, see figure [F\_Structure] and the more detailed
  figure [F\_OptimizationProc]. Depending on the selected kinetic model
  and its parameter to fit one of the children classes (e.g. constant
  Rate, of the parent class model) is selected. As the initial guess of
  the parameter [17]_ is in the physical realistic range, this problem
  can be fitted with a gradient based optimizer. The optimizer class
  calculates the deviation, equation [E\_LS] using the data from the
  *Fit\_one\_run* class [18]_ and the calculated yields of the model
  applying the current kinetic parameter. The deviation allows the
  optimizer a new estimation of the parameter. This estimated parameter
  are passed to the kinetic model class, which sets these parameter for
  a further use of calculating the mass over time. This loop is repeated
  until the deviation is lower than the setted tolerance.
| The species and energy balance is carried out with specific classes
  for ``FG-DVC`` \ and ``CPD``. As these are straight forward analytical
  calculations, chapters [SSS\_ConsEqCPD] and [SSS\_ConsEqFGDVC], these
  classes just needs to be initialized with the right input parameter to
  output afterwards the results applying their private methods, see the
  *PKP Code Documentation*.

.. [1]
   available at:
   http://www.et.byu.edu/tom/cpd/cpdcpnlg/cpdcp\_nlgfiles.html

.. [2]
   Alternatively the name of the executable can be changed in the
   *Pyrolysis.py*. But rename the file is the less effort.

.. [3]
   The subtraction of the other species leads to small oscillation in
   the yields. These yield curves are further usable. But deriving this
   curve strengthen this oscillation to a giant value. So the yield
   curve has to be smoothed before deriving it by apply the equation
   :math:`y_i=\frac{1}{2} \alpha \cdot (y_{i-1}+y_{i+1})+(1-\alpha) \cdot y_i`
   fifty times over all points of the yields. This has still a low
   influence on the results (applying it very often would lead to a flat
   curve), but decreases the oscillation that much, that they are small
   at the derived curve (central differencing scheme).

.. [4]
   ’tTHistory.txt’ which was generated by PKP and written into the
   ``FG-DVC`` \ main directory.

.. [5]
   Using the FG-DVC *coalsd.exe*. For more information see the FG-DVC
   manual.

.. [6]
   The option recommended by the FG-DVC
   manual :raw-latex:`\cite{FGDVC_822}`.

.. [7]
   If you want to use another string in this file, you also have to
   change the individual file note in *InformationFiles.py*.

.. [8]
   see the FG-DVC manual for more details: THE FG-DVC COAL PYROLYSIS
   MODEL USER’S GUIDE Version 8.2.3 for Windows; Advanced Fuel Research,
   Inc., 87 Church Street, East Hartford, CT 06108-3728, USA; 2012

.. [9]
   The reason might be that the very large analytical equations in
   Python (as an interpreting language) take more time than let the
   integral solve by a external library.

.. [10]
   There are also other approaches to avoid the double integration like
   in the paper by McGuiness et al. :raw-latex:`\cite{McGuiness_DAEM}`,
   but also these assumptions made here
   (:math:`\mathrm{\sigma \rightarrow 0 }` or
   :math:`\mathrm{\frac{E_0}{T} \rightarrow \infty }`) cannot be applied
   here.

.. [11]
   the ``scipy.integrate.cumtrapz`` module,
   http://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.cumtrapz.html

.. [12]
   *http://docs.scipy.org/doc/scipy/reference/optimize.html*

.. [13]
   The standard setting optimizer is ``fmin``. The ``leastsq`` optimizer
   is the second choice.

.. [14]
   *http://docs.scipy.org/doc/scipy/reference/generated/scipy.integrate.odeint.html*

.. [15]
   For Windows it is easier to install Python(x,y)
   (https://code.google.com/p/pythonxy/) which includes all these
   packages than install each of them manually.

.. [16]
   If chosen this way by the user. Otherwise also a selected ``FG-DVC``
   \ library coal can directly be used to run ``FG-DVC``. Then this step
   is not done.

.. [17]
   defined in the code

.. [18]
   which provides the pyrolysis program results
