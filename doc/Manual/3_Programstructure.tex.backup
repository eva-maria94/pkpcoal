\section{Programs Structure}\label{S_Program}
The files, the directory must contain, are listed in chapter~\ref{SS_1stSteps}.The Python script \emph{Pyrolysis.py} accesses to all the defined classes and controls the whole PKP program. So PKP can be launched the simpliest way by starting \emph{Pyrolysis.py}.\\
The figure~\ref{F_Structure} gives a overview of the program structure.\\

The whole program structure is visualized in figure~\ref{F_Structure}, the fitting structure in figure~\ref{F_OptimizationProc}. For the detailled documentation for each class, see the document \emph{PKP Code Documentation}.\\

\begin{figure}
\centering%\capstart
\includegraphics[width=22cm,angle=90]{Figures/Programstructure}
\caption{Overview of the program. The Optimization procedure is shown detailled in figure~\ref{F_OptimizationProc}.}
\label{F_Structure}
\end{figure}

\begin{figure}
\centering%\capstart
\includegraphics[height=9cm,angle=0]{Figures/FittingProcedure}
\caption{The optimization structure. The three classes \textit{LeastSquarsEstimator}, \textit{Fit\_one\_run} and \textit{Model} are marked with different colors like in Figure~\ref{F_Structure}. The Deviation is calculated with equation~\ref{E_LS}.}
\label{F_OptimizationProc}
\end{figure}

In figure~\ref{F_Structure} the external programs are colored in red, the PKP classes are in green, marked with the class name or the relevant file name. Inputted, transfered or outputted date is in black.\\
So as first the specific user information about the operating conditions and the coal properties are imported using the reading classes contained in \emph{Information Files.py}. Parts of these inforation are further used to write the input file for the \FGDVC coal generator\footnote{If chosen this way by the user. Otherwise also a selected \FGDVC library coal can directly be used to run \texttt{FG-DVC}. Then this step is not done.}, which is launched afterwards to generate the \FGDVC coal input files.\\
Afterwards the pyrolysis programs are launched automatically by PKP. The file \emph{IN.dat} is just an input files for \CPD which defines the name of the output files. So the content in \emph{IN.dat} shouldn't be changed. The central input file for \FGDVC is the \emph{instruct.ini} which contains all information about the location of the coal file, the operating conditions and the numerical parameters. This file was generated by PKP before launching. The second input file for \FGDVC contains the temperature history. This file (name \emph{tTHistory.txt}, located in the \FGDVC main directory) was also written by PKP before each run.\\
The output files of the pyrolysis programs are read by the specific \emph{*\_Result} classes (e.g. \emph{CPD\_Result}). This classes save the information from the output files, contain a dictionary with the information which column contains which information. This class also processes the specific information (e.g. the modifications described in chapter~\ref{SS_Generate_Results}, or the transformation from ms into s in the \CPD output). Converting theses pyrolysis program specific output shape into a general shape, similar for the output of all pyrolysis programs using this \emph{*\_Result} classes has two main advantages. As this 'standard shaped' information are passed to the following fitting data class \emph{Fit\_one\_run}, is the following fitting procedure working for the output of all pyrolysis programs the same way. The second advantage is, that for a modified output of a new version just a new \emph{*\_Result} class needs to be added, modified for the new output shape. Using the dictionary has the advantage that the code is better readable, more robust against modifications and more general purpose. So in the program the yield of tar can be requested with \emph{self.Yield('Tar')} instead of using any number. So all the species must not have the same index in the output of the \emph{*\_Result} classes, which might also not work as the pyrolysis programs have different number of species in the yields (\FGDVC has 15 species in the yields, \CPD eight).\\

The fitting procedure is carried out using three classes: a Least Squares Estimator, a kinetic model and a class for the pyrolysis program results, see figure~\ref{F_Structure} and the more detailed figure~\ref{F_OptimizationProc}. Depending on the selected kinetic model and its parameter to fit one of the children classes (e.g. constant Rate) of model is selected. As the initial guess of the parameter\footnote{defined in the code} is in the physical realistic range, this problem can be optimized with a gradient based optimizer. 

\_Result class supports other classes with whole yields and rates Arrays and dictionaries\\