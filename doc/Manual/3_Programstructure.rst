Programs Structure
==================

| The files, the directory must contain, are listed in
  chapter [SS\_1stSteps]. The Python script *Pyrolysis.py* accesses to
  all the defined classes and controls the whole PKP program. So PKP can
  be launched the simplest way by starting *Pyrolysis.py*.
| The figure [F\_Structure] gives a overview of the program structure.
| The whole program structure is visualized in figure [F\_Structure],
  the fitting structure in figure [F\_OptimizationProc]. For a detailed
  documentation for each class and its method, see the document *PKP
  Code Documentation*.
| All required Python packages are also listened in this document. [1]_

.. figure:: Figures/Programstructure
   :alt: Overview of the program. The Optimization procedure is shown
   detailed in figure [F\_OptimizationProc].

   Overview of the program. The Optimization procedure is shown detailed
   in figure [F\_OptimizationProc].

.. figure:: Figures/FittingProcedure
   :alt: The optimization structure. The three classes
   *LeastSquarsEstimator*, *Fit\_one\_run* and *Model* are marked with
   different colors like in Figure [F\_Structure]. The Deviation is
   calculated with equation [E\_LS].

   The optimization structure. The three classes *LeastSquarsEstimator*,
   *Fit\_one\_run* and *Model* are marked with different colors like in
   Figure [F\_Structure]. The Deviation is calculated with
   equation [E\_LS].

| In figure [F\_Structure] the external programs are colored in red, the
  PKP classes are in green, marked below with the class name or the
  relevant file name. Inputted, transfered or outputted data is in
  black.
| So as first the specific user information about the operating
  conditions and the coal properties are imported using the reading
  classes contained in *Information Files.py*.
| Parts of this information are further used to write the input file for
  the coal generator [2]_, which is launched afterwards to generate the
  coal input files.
| Afterwards the pyrolysis programs are launched automatically by PKP.
  The file *IN.dat* is an input file for telling how the output files
  should be named. So the content in *IN.dat* shouldn’t be changed. The
  central input file for is the *instruct.ini* which contains all
  information about the location of the coal file, the operating
  conditions and the numerical parameters. This file was generated by
  PKP before launching. The second input file for contains the
  temperature history. This file (named *tTHistory.txt*, located in the
  main directory) was also written by PKP before each run.
| The output files of the pyrolysis programs are read by their specific
  *\*\_Result* classes (e.g. *CPD\_Result*). These classes save the
  information from the output files, contain a dictionary with the
  information which column contains which species and physical variable.
  The *\*\_Result* classes also process the specific information (e.g.
  the modifications described in chapter [SS\_Generate\_Results], or the
  transformation from ms into s in the output). Converting this
  pyrolysis program specific output shape into a general one has two
  main advantages. As this ’standard shaped’ information are passed to
  the following fitting data class *Fit\_one\_run*, is the fitting
  procedure working for the output of all pyrolysis programs the same
  way. The second advantage is, that for a modified output of a new
  version of a pyrolysis program just a new *\*\_Result* class needs to
  be added, modified for the new output shape. Using the dictionaries
  has the advantage that the code is better readable, more robust
  against modifications and more general purpose. So in the program the
  yield of tar can be requested with *self.Yield(’Tar’)* instead of
  using any number. A species must not have the same index in the output
  of the *\*\_Result* classes, which might also not work as the
  pyrolysis programs have different number of species in the yields (has
  15 species in the yields, eight).
| The fitting procedure is carried out using three classes: a Least
  Squares Estimator, a kinetic model and a class for the pyrolysis
  program results, see figure [F\_Structure] and the more detailed
  figure [F\_OptimizationProc]. Depending on the selected kinetic model
  and its parameter to fit one of the children classes (e.g. constant
  Rate, of the parent class model) is selected. As the initial guess of
  the parameter [3]_ is in the physical realistic range, this problem
  can be fitted with a gradient based optimizer. The optimizer class
  calculates the deviation, equation [E\_LS] using the data from the
  *Fit\_one\_run* class [4]_ and the calculated yields of the model
  applying the current kinetic parameter. The deviation allows the
  optimizer a new estimation of the parameter. This estimated parameter
  are passed to the kinetic model class, which sets these parameter for
  a further use of calculating the mass over time. This loop is repeated
  until the deviation is lower than the setted tolerance.
| The species and energy balance is carried out with specific classes
  for and ``CPD``. As these are straight forward analytical
  calculations, chapters [SSS\_ConsEqCPD] and [SSS\_ConsEqFGDVC], these
  classes just needs to be initialized with the right input parameter to
  output afterwards the results applying their private methods, see the
  *PKP Code Documentation*.

.. [1]
   For Windows it is easier to install Python(x,y)
   (https://code.google.com/p/pythonxy/) which includes all these
   packages than install each of them manually.

.. [2]
   If chosen this way by the user. Otherwise also a selected library
   coal can directly be used to run ``FG-DVC``. Then this step is not
   done.

.. [3]
   defined in the code

.. [4]
   which provides the pyrolysis program results
